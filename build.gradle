/**
 * 1.0.0    : release
 * 1.0.1    : maven依存のtypo修正
 * 1.0.x    : Circle CIに移行
 * 1.1.x    : RxAndroid / ラムダを導入
 * 1.2.x    : コールバック用インターフェースを拡張
 * 1.3.x    : ContentHolder内部で不要だったクラスを保持しないように修正
 * 2.23.0.x : バージョン規則を修正, 構成を大幅変更
 * 2.23.1.x : ToolbarのID命名規則を変更
 * 2.24.0.x : Android N対応
 * 2.24.1.x : PlayService依存を削除
 * 2.24.3.x : RxAndroid-Supportの依存バージョンを変更
 * 2.24.4.x : Text-KeyValueStoreの依存バージョンを変更
 * 2.24.5.x : support library 24.1.+に対応
 */
def ARTIFACT_VERSION = "2.24.5"
def ARTIFACT_NAME = file(".").absoluteFile.name
def ARTIFACT_INSTALL_TARGET = getArtifactInstallTarget()

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "http://eaglesakura.github.io/maven/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.1'
        classpath "com.eaglesakura:plugin-android-dbgenerator:2.1.162"
        classpath 'me.tatarka:gradle-retrolambda:3.2.5' // support Lambda
    }
}

repositories {
    maven { url "http://eaglesakura.github.io/maven/" }
    jcenter()
    mavenCentral()
}

apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda' /* Android Lambda Support */
apply plugin: 'com.eaglesakura.android-props'


props {
    property file("properties.json")
}

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.3"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        minSdkVersion 15      // 現実的な対応ラインとしてAndroid 4.0.4とする
        targetSdkVersion 24
        // Device Test
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"    // JUnit4
    }

    dataBinding {
        enabled = true
    }

    sourceSets {
        main {
            java.srcDirs += [
                    "src/main/gen/java",
            ]
        }
    }

    lintOptions {
        disable "NewApi"
    }
}

// check env
if (!hasProperty("ANDROID_SUPPORT_LIB_VERSION")) {
    ext.ANDROID_SUPPORT_LIB_VERSION = "24.+"
}
if (!hasProperty("ANDROID_PLAYSERVICE_LIB_VERSION")) {
    ext.ANDROID_PLAYSERVICE_LIB_VERSION = "+"
}
// Local or maven
if (!hasProperty("EGLIBRARY_COMPILE_LOCAL")) {
    ext.EGLIBRARY_COMPILE_LOCAL = false
}

configurations {
    all*.exclude group: "com.google.code.findbugs", module: "jsr305"
    all*.exclude group: "org.apache.httpcomponents", module: "httpclient"

    // not using okhttp
    all*.exclude group: "com.squareup.okhttp3", module: "okhttp"
}


dependencies {
    if (EGLIBRARY_COMPILE_LOCAL) {
        compile project(':eglibrary:simple-utils')
        compile project(':eglibrary:android-simple-utils')
        compile project(':eglibrary:android-command-service')
        compile project(':eglibrary:android-text-kvs')
        compile project(':eglibrary:android-thread')
        compile project(':eglibrary:android-net')
        compile project(':eglibrary:onactivityresult-invoke')
        compile project(':eglibrary:small-aquery')
        compile project(':eglibrary:rxandroid-support')
        compile project(':eglibrary:margarineknife')
        compile project(':eglibrary:garnet')
        compile project(':eglibrary:light-saver')

        androidTestCompile project(":eglibrary:android-devicetest-support")
        testCompile project(":eglibrary:android-unittest-support")
    } else {
        compile 'com.eaglesakura:simple-utils:1.+'
        compile 'com.eaglesakura:android-simple-utils:1.+'
        compile 'com.eaglesakura:android-text-kvs:1.+'
        compile 'com.eaglesakura:android-thread:1.+'
        compile 'com.eaglesakura:android-net:1.+'
        compile 'com.eaglesakura:rxandroid-support:2.+'
        compile 'com.eaglesakura:onactivityresult-invoke:1.+'
        compile 'com.eaglesakura:small-aquery:+'
        compile 'com.eaglesakura:margarineknife:1.+'
        compile 'com.eaglesakura:garnet:0.+'
        compile 'com.eaglesakura:light-saver:1.+'
        compile 'com.eaglesakura:android-command-service:1.+'

        androidTestCompile 'com.eaglesakura:android-devicetest-support:2.+'
        testCompile 'com.eaglesakura:android-unittest-support:1.+'
    }

    /**
     * support libs
     */
    compile "com.android.support:support-v4:${ANDROID_SUPPORT_LIB_VERSION}"
    compile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_LIB_VERSION}"
    compile "com.android.support:cardview-v7:${ANDROID_SUPPORT_LIB_VERSION}"
    compile "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_LIB_VERSION}"
    compile "com.android.support:palette-v7:${ANDROID_SUPPORT_LIB_VERSION}"
    compile "com.android.support:design:${ANDROID_SUPPORT_LIB_VERSION}"

    compile 'com.android.support:support-annotations:+'

    /**
     * Smooth ProgressBar / 160 Method
     * https://github.com/castorflex/SmoothProgressBar
     */
    compile 'com.github.castorflex.smoothprogressbar:library:1.1.0'
}

/**
 * UnitTest & retro lambda
 */
tasks.withType(Test) {
    project.tasks
            .findAll {
        task -> (task.name ==~ /compile.*?TestJava.*?/)
    }
    .each { task ->
        task.doFirst {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
    }
}

apply plugin: 'maven'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

android.libraryVariants.all { variant ->
    if (!"release".equals(variant.name) || "".equals(ARTIFACT_VERSION)) {
        return;
    }

    task("javadoc", type: Javadoc) {
        title = "${file(".").name} ver ${ARTIFACT_VERSION}"
        description "Generates Android Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"

        classpath = files(variant.javaCompile.classpath.files) +
                files(ext.androidJar) +
                files("build/intermediates/classes/${variant.name}/") +
                fileTree("build/intermediates/exploded-aar").include("**/*.jar")

        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/*Dao.java' /* ignore greenDAO */
        exclude '**/DaoMaster.java' /* ignore greenDAO */
        exclude '**/DaoSession.java' /* ignore greenDAO */
        exclude '**/R.java' /* ignore greenDAO */

        options.addStringOption('Xdoclint:none', '-quiet')
        options.encoding = "UTF-8"
        project.configure(options) {
            memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
            charSet = "UTF-8"
        }
    }


    task("javadocJar", type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri(ARTIFACT_INSTALL_TARGET))
            pom.version = ARTIFACT_VERSION + getArtifactVersionSuffix()
            pom.groupId = "com.eaglesakura"
            pom.artifactId = ARTIFACT_NAME
        }
    }
}

[uploadArchives.repositories.mavenDeployer]*.pom*.whenConfigured { pom ->
    pom.project {
        inceptionYear '2016'
        packaging 'aar'
        dependencies {
            // Support Library
            dependency {
                groupId = 'com.android.support'
                artifactId = 'support-v4'
                version = dependenceisVersion("com.android.support:support-v4", "${ANDROID_SUPPORT_LIB_VERSION}")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.android.support'
                artifactId = 'appcompat-v7'
                version = dependenceisVersion("com.android.support:appcompat-v7", "${ANDROID_SUPPORT_LIB_VERSION}")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.android.support'
                artifactId = 'cardview-v7'
                version = dependenceisVersion("com.android.support:cardview-v7", "${ANDROID_SUPPORT_LIB_VERSION}")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.android.support'
                artifactId = 'cardview-v7'
                version = dependenceisVersion("com.android.support:recyclerview-v7", "${ANDROID_SUPPORT_LIB_VERSION}")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.android.support'
                artifactId = 'palette-v7'
                version = dependenceisVersion("com.android.support:palette-v7", "${ANDROID_SUPPORT_LIB_VERSION}")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.android.support'
                artifactId = 'palette-v7'
                version = dependenceisVersion("com.android.support:design", "${ANDROID_SUPPORT_LIB_VERSION}")
                scope = 'compile'
            }

            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'simple-utils'
                version = dependenceisVersion("com.eaglesakura:simple-utils", "1.+")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'android-simple-utils'
                version = dependenceisVersion("com.eaglesakura:android-simple-utils", "1.+")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'android-text-kvs'
                version = dependenceisVersion("com.eaglesakura:android-text-kvs", "1.+")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'android-thread'
                version = dependenceisVersion("com.eaglesakura:android-thread", "1.+")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'android-net'
                version = dependenceisVersion("com.eaglesakura:android-net", "1.+")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'margarineknife'
                version = dependenceisVersion("com.eaglesakura:margarineknife", "1.0.+")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'garnet'
                version = dependenceisVersion("com.eaglesakura:garnet", "0.+")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'rxandroid-support'
                version = dependenceisVersion("com.eaglesakura:rxandroid-support", "2.+")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'light-saver'
                version = dependenceisVersion("com.eaglesakura:light-saver", "1.0.+")
                scope = 'compile'
            }
            dependency {
                groupId = 'com.eaglesakura'
                artifactId = 'android-command-service'
                version = dependenceisVersion("com.eaglesakura:android-command-service", "1.+")
                scope = 'compile'
            }
        }
    }
}

task uploadJavadoc << {
    def src = file("build/docs/javadoc/");
    def dst = new File("${ARTIFACT_INSTALL_TARGET.absolutePath}/doc/${ARTIFACT_NAME}/");
    dst.deleteDir();
    dst.mkdirs();

    ["/usr/bin/rsync", "-a", src.absolutePath, dst.absolutePath].execute().text;
}

/**
 * 依存している固定ライブラリバージョンを取得する
 */
String dependenceisVersion(String libName, String defVersion) {
    def lines = [];
    def target = file("dependencies.txt");
    if (!target.file) {
        return defVersion;
    }

    target.text.eachLine {
        if (!it.contains(libName) || it.contains("(")) {
            return;
        }

        def tokens = it.split(" ");
        if (tokens == null || tokens.length == 0) {
            return;
        }

        lines += tokens[tokens.length - 1];
    }
    if (lines.empty) {
        println("${libName} -> ${defVersion}")
        return defVersion;
    } else {
        println("${libName} -> ${lines[0]}")
        return lines[0];
    }
}

/**
 * バージョンを取得する
 * CircleCIの場合、バージョン末尾にビルド番号を付与する
 */
def getArtifactVersionSuffix() {
    if (System.env.CIRCLE_BUILD_NUM != null) {
        // CircleCIのバージョンが指定されているので、そちらを利用する
        return ".${System.env.CIRCLE_BUILD_NUM}"
    } else {
        return ".local"
    }
}

/**
 * Mavenの格納先を確定する
 */
def getArtifactInstallTarget() {
    if (file("maven").directory) {
        return file("maven");
    } else if (System.env.CIRCLE_ARTIFACTS != null) {
        return file(System.env.CIRCLE_ARTIFACTS);
    } else if (System.env.MAVEN_LOCAL_REPO != null) {
        return file(System.env.MAVEN_LOCAL_REPO);
    } else {
        return file("ci-release");
    }
}
