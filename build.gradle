/**
 * 1.0.0 : release
 */
def ARTIFACT_VERSION = "1.0.0"
def ARTIFACT_NAME = file(".").absoluteFile.name
def ARTIFACT_INSTALL_TARGET = getArtifactInstallTarget()

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
    }
}

repositories {
    maven { url "http://eaglesakura.github.io/maven/" }
    maven { url "https://clojars.org/repo/" }
    mavenCentral()
}

apply plugin: 'com.android.library'

sourceCompatibility = 1.7
targetCompatibility = 1.7

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 23
    }

    sourceSets {
        main {
            java.srcDirs = [
                    "src/main/java", "src/main/generated/prop",
            ]
        }
    }
}

// check env
if (!hasProperty("ANDROID_SUPPORT_LIB_VERSION")) {
    ext.ANDROID_SUPPORT_LIB_VERSION = "+"
}
if (!hasProperty("ANDROID_PLAYSERVICE_LIB_VERSION")) {
    ext.ANDROID_PLAYSERVICE_LIB_VERSION = "+"
}
// Local or maven
if (!hasProperty("EGLIBRARY_COMPILE_LOCAL")) {
    ext.EGLIBRARY_COMPILE_LOCAL = false
}

dependencies {
    if (EGLIBRARY_COMPILE_LOCAL) {
        compile project(':eglibrary:simple-utils')
        compile project(':eglibrary:android-simple-utils')
        compile project(':eglibrary:android-text-kvs')
        compile project(':eglibrary:android-thread')
        compile project(':eglibrary:android-canvas-graphics')
        compile project(':eglibrary:android-net')
        compile project(':eglibrary:onactivityresult-invoke')
        compile project(':eglibrary:small-aquery')
    } else {
        compile 'com.eaglesakura:simple-utils:1.0.+'
        compile 'com.eaglesakura:android-simple-utils:1.0.+'
        compile 'com.eaglesakura:android-text-kvs:1.0.+'
        compile 'com.eaglesakura:android-thread:1.0.+'
        compile 'com.eaglesakura:android-canvas-graphics:1.0.+'
        compile 'com.eaglesakura:android-net:1.0.+'
        compile 'com.eaglesakura:onactivityresult-invoke:+'
        compile 'com.eaglesakura:small-aquery:+'
    }

    /**
     * support libs
     */
    compile "com.android.support:support-v4:${ANDROID_SUPPORT_LIB_VERSION}"
    compile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_LIB_VERSION}"
    compile "com.android.support:cardview-v7:${ANDROID_SUPPORT_LIB_VERSION}"
    compile "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_LIB_VERSION}"
    compile "com.android.support:palette-v7:${ANDROID_SUPPORT_LIB_VERSION}"
    compile "com.android.support:design:${ANDROID_SUPPORT_LIB_VERSION}"

    /**
     * Play Service
     */
    compile "com.google.android.gms:play-services-plus:${ANDROID_PLAYSERVICE_LIB_VERSION}"
    compile "com.google.android.gms:play-services-gcm:${ANDROID_PLAYSERVICE_LIB_VERSION}"
    compile 'com.android.support:support-annotations:+'

    /**
     * Injection / State
     */
    compile "com.jakewharton:butterknife:+"
    compile 'frankiesardo:icepick:+'
    provided 'frankiesardo:icepick-processor:+'
}

apply plugin: 'maven'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

android.libraryVariants.all { variant ->
    if (!"release".equals(variant.name) || "".equals(ARTIFACT_VERSION)) {
        return;
    }

    task("javadoc", type: Javadoc) {
        title = "${file(".").name} ver ${ARTIFACT_VERSION}"
        description "Generates Android Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"

        def CLASS_PATH = files(variant.javaCompile.classpath.files) +
                files(ext.androidJar) +
                files("build/intermediates/classes/${variant.name}/")

        def SUPPORT_LIB_DIR = [
                "support-v4",
                "appcompat-v7", "cardview-v7", "gridlayout-v7", "mediarouter-v7", "palette-v7", "recyclerview-v7",
                "support-v13",
                "customtabs", "design", "multidex", "support-annotations"];
        def SUPPORT_LIB_VERSION = "23.1.1"
        
        for (def libName : SUPPORT_LIB_DIR) {
            CLASS_PATH += files("${android.sdkDirectory}/extras/android/m2repository/com/android/support/" +
                    "${libName}/${SUPPORT_LIB_VERSION}/${libName}-${SUPPORT_LIB_VERSION}.aar");
        }
        classpath = CLASS_PATH

        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/*Dao.java' /* ignore greenDAO */
        exclude '**/DaoMaster.java' /* ignore greenDAO */
        exclude '**/DaoSession.java' /* ignore greenDAO */
        exclude '**/R.java' /* ignore greenDAO */

        options.encoding = "UTF-8"
        project.configure(options) {
            memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
            charSet = "UTF-8"
        }
    }


    task("javadocJar", type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri(ARTIFACT_INSTALL_TARGET))
            pom.version = ARTIFACT_VERSION
            pom.groupId = "com.eaglesakura"
            pom.artifactId = ARTIFACT_NAME
        }
    }
}

[uploadArchives.repositories.mavenDeployer]*.pom*.whenConfigured { pom ->
    pom.project {
        inceptionYear '2016'
        packaging 'aar'
        licenses {
            license {
                name 'MIT License'
                url "https://raw.githubusercontent.com/eaglesakura/${ARTIFACT_NAME}/master/LICENSE.txt"
            }
        }
        dependencies {
            dependency {
                groupId = 'com.jakewharton'
                artifactId = 'butterknife'
                version = '7.0.+'
                scope = 'compile'
            }
            dependency {
                groupId = 'frankiesardo'
                artifactId = 'icepick:'
                version = '3.1.+'
                scope = 'compile'
            }
            dependency {
                groupId = 'frankiesardo'
                artifactId = 'icepick-processor'
                version = '3.1.+'
                scope = 'provided'
            }
        }
    }
}

task uploadJavadoc << {
    def src = file("build/docs/javadoc/");
    def dst = new File("${ARTIFACT_INSTALL_TARGET.absolutePath}/doc/${ARTIFACT_NAME}/");
    dst.deleteDir();
    dst.mkdirs();

    ["/usr/bin/rsync", "-a", src.absolutePath, dst.absolutePath].execute().text;
}

/**
 * Mavenの格納先を確定する
 */
File getArtifactInstallTarget() {
    if (System.env.CIRCLE_ARTIFACTS != null) {
        return file(System.env.CIRCLE_ARTIFACTS);
    } else if (System.env.MAVEN_LOCAL_REPO != null) {
        return file(System.env.MAVEN_LOCAL_REPO);
    } else {
        return file("ci-release");
    }
}
